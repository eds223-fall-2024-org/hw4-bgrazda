---
title: "Homework 4"
format: html
editor: visual
---

# Import libraries and data
```{r}
library(tidyverse)
library(sf)
library(terra)
library(here)
library(tmap)
```

```{r}
# Import data
sst_2008 <- terra::rast(here('data', 'average_annual_sst_2008.tif'))
sst_2009 <- terra::rast(here('data', 'average_annual_sst_2009.tif'))
sst_2010 <- terra::rast(here('data', 'average_annual_sst_2010.tif'))
sst_2011 <- terra::rast(here('data', 'average_annual_sst_2011.tif'))

bathymetry <- terra::rast(here('data', 'depth.tif'))

west_coast <- st_read(here('data', 'wc_regions_clean.shp'))
```
## Process Data
```{r}
# Check to make sure CRS matches before changing into stack
crs(sst_2008) == crs(sst_2009)
crs(sst_2009) == crs(sst_2010)
crs(sst_2010) == crs(sst_2011)

# Create a stack of SST rasters
combined_sst <- c(sst_2008, sst_2009, sst_2010, sst_2011)

# Find the mean of each
mean_sst <- mean(combined_sst) 

# Convert from kelvins to celsius
mean_sst_celsius <- mean_sst - 273.15

# Crop depth to the extent of the average sst
# bathymetry <- mask(crop(bathymetry, mean_sst_celsius), mean_sst_celsius)

# Resample the bathymetry resolution to the mean_sst_celsius
bathymetry_resampled <- resample(bathymetry, mean_sst_celsius, method = 'ngb')


```

```{r}
if (ext(bathymetry_resampled) == ext(mean_sst_celsius)) {
  print("The extents are the same.")
} else {
  warning("The extents are different.")
}

# Check if the resolutions match
if (all(res(bathymetry_resampled) == res(mean_sst_celsius))) {
  print('Great job! Resolutions match.')
}else{
  warning('Resolutions do not match.')
}

# Check that the CRS match
if(crs(bathymetry_resampled) == crs(mean_sst_celsius)) {
  print('Coordinate reference systems match.')
} else{
  warning('CRS does not match. Now projecting the resampled bathymetry raster to the mean_sst_celsius CRS.')
  bathymetry_resampled <- project(bathymetry_resampled, crs(mean_sst_celsius), method = "bilinear")
  print('CRS now match.')
}

# Exploratory plots
plot(bathymetry)
plot(bathymetry_resampled)
plot(mean_sst_celsius)
plot(west_coast)

# Stack both rasters after ensuring they have the same extent, resolution, and CRS
stacked_bathymetry_sst <- c(bathymetry_resampled, mean_sst_celsius)

```

## Find suitable locations for Oysters
```{r}


sst_rcl <- matrix(c(-Inf, 11, 0,
                    11, 30, 1,
                    30, Inf, 0),
                  ncol = 3, byrow = TRUE)
depth_rcl <- matrix(c(-Inf, 0, 0,
                      0, 70, 1,
                      70, Inf, 0),
                    ncol = 3, byrow = TRUE)
                    
# reclassify 
reclassify_sst <- classify(stacked_bathymetry_sst[[2]], rcl = sst_rcl,  include.lowest = TRUE)  
#values(reclassify_sst) <- as.factor(values(reclassify_sst))
reclassify_depth <- classify(stacked_bathymetry_sst[[1]], rcl = depth_rcl,  include.lowest = TRUE)
#values(reclassify_depth) <- as.factor(values(reclassify_depth))

# Raster map algebra for 0s and 1s
sst_depth_reclass_total <- reclassify_sst * reclassify_depth
#sst_depth_reclass_total <- as.factor(sst_depth_reclass_total)

#levels(sst_depth_reclass_total) <- data.frame(ID = c(0, 1), category = c("Unsuitable", "Suitable"))
#values(sst_depth_reclass_total) <- as.factor(values(sst_depth_reclass_total))\

```
## Determine the most suitable EEZ for Oysters
```{r}

if (crs(west_coast) == crs(sst_depth_reclass_total)){
  print('Coordinate reference systems match!')
}else{
  warning('Coordinate reference systems do not match. Transforming now.')
  west_coast <- st_transform(west_coast, crs = crs(sst_depth_reclass_total))
  print('West Coast Coordinate Reference System now matches the Oyster raster stack.')
}

eez_mask <- mask(sst_depth_reclass_total, west_coast)

cell_area <- cellSize(eez_mask, unit = 'km')

# suitable_locations <- eez_mask == 1



#res_x <- res(suitable_locations)[1]
#res_y <- res(suitable_locations)[2]

#cell_area <- res_x * res_y

eez_raster <- rasterize(west_coast, eez_mask, field = 'rgn')

eez_suitability <- mask(eez_raster, eez_mask)
    # Calculate the area
eez_suitability_area <- zonal(cell_area, eez_suitability, fun = 'sum') %>%
    rename(suitable_area_km2 = area)
  

# Join area calcs with the eez_zone dataset
eez_suitability_area <- left_join(eez_zones, eez_suitability_area, by = 'rgn')  
  
  # Add column and sort by rank
eez_suitability_area <- eez_suitability_area %>%
    mutate(rank = rank(-suitable_area_km2, ties.method = "min")) %>%
    arrange(rank)
  

```

```{r}
tm_shape(west_coast) +
  tm_polygons()
```







